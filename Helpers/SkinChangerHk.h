enum eItemDefinitionIndex
{
	WEAPON_DEAGLE = 1,
	WEAPON_ELITE = 2,
	WEAPON_FIVESEVEN = 3,
	WEAPON_GLOCK = 4,
	WEAPON_AK47 = 7,
	WEAPON_AUG = 8,
	WEAPON_AWP = 9,
	WEAPON_FAMAS = 10,
	WEAPON_G3SG1 = 11,
	WEAPON_GALILAR = 13,
	WEAPON_M249 = 14,
	WEAPON_M4A1 = 16,
	WEAPON_MAC10 = 17,
	WEAPON_P90 = 19,
	WEAPON_MP5_SD = 23,
	WEAPON_UMP45 = 24,
	WEAPON_XM1014 = 25,
	WEAPON_BIZON = 26,
	WEAPON_MAG7 = 27,
	WEAPON_NEGEV = 28,
	WEAPON_SAWEDOFF = 29,
	WEAPON_TEC9 = 30,
	WEAPON_TASER = 31,
	WEAPON_HKP2000 = 32,
	WEAPON_MP7 = 33,
	WEAPON_MP9 = 34,
	WEAPON_NOVA = 35,
	WEAPON_P250 = 36,
	WEAPON_SCAR20 = 38,
	WEAPON_SG556 = 39,
	WEAPON_SSG08 = 40,
	WEAPON_KNIFE = 42,
	WEAPON_FLASHBANG = 43,
	WEAPON_HEGRENADE = 44,
	WEAPON_SMOKEGRENADE = 45,
	WEAPON_MOLOTOV = 46,
	WEAPON_DECOY = 47,
	WEAPON_INCGRENADE = 48,
	WEAPON_C4 = 49,
	WEAPON_KNIFE_T = 59,
	WEAPON_M4A1_SILENCER = 60,
	WEAPON_USP_SILENCER = 61,
	WEAPON_CZ75A = 63,
	WEAPON_REVOLVER = 64,
	WEAPON_KNIFE_BAYONET = 500,
	WEAPON_KNIFE_CSS = 503,
	WEAPON_KNIFE_FLIP = 505,
	WEAPON_KNIFE_GUT = 506,
	WEAPON_KNIFE_KARAMBIT = 507,
	WEAPON_KNIFE_M9_BAYONET = 508,
	WEAPON_KNIFE_TACTICAL = 509,
	WEAPON_KNIFE_FALCHION = 512,
	WEAPON_KNIFE_SURVIVAL_BOWIE = 514,
	WEAPON_KNIFE_BUTTERFLY = 515,
	WEAPON_KNIFE_PUSH = 516,
	WEAPON_KNIFE_CORD = 517,
	WEAPON_KNIFE_CANIS = 518,
	WEAPON_KNIFE_URSUS = 519,
	WEAPON_KNIFE_GYPSY_JACKKNIFE = 520,
	WEAPON_KNIFE_OUTDOOR = 521,
	WEAPON_KNIFE_STILETTO = 522,
	WEAPON_KNIFE_WIDOWMAKER = 523,
	WEAPON_KNIFE_SKELETON = 525,
	GLOVE_STUDDED_BLOODHOUND = 5027,
	GLOVE_T_SIDE = 5028,
	GLOVE_CT_SIDE = 5029,
	GLOVE_SPORTY = 5030,
	GLOVE_SLICK = 5031,
	GLOVE_LEATHER_WRAP = 5032,
	GLOVE_MOTORCYCLE = 5033,
	GLOVE_SPECIALIST = 5034,
	GLOVE_HYDRA = 5035
};

uint8_t SkinChangerShell[] = {
	0x55, 0x53, 0x57, 0x56, 0x83, 0xEC, 0x40, 0x89, 0xD6, 0x89, 0xCF, 0xBB,
	0x00, 0x00, 0x00, 0x00, 0x8B, 0x43, 0x40, 0x3B, 0x44, 0x24, 0x50, 0x75,
	0x29, 0x8B, 0x43, 0x14, 0x8B, 0x4B, 0x28, 0x8B, 0x53, 0x3C, 0x8B, 0x0C,
	0x0A, 0xC1, 0xE1, 0x04, 0x8B, 0x2C, 0x08, 0x85, 0xED, 0x74, 0x09, 0x8B,
	0x43, 0x0C, 0x80, 0x3C, 0x28, 0x00, 0x74, 0x1A, 0x80, 0x7B, 0x58, 0x01,
	0x75, 0x04, 0xC6, 0x43, 0x58, 0x00, 0x8B, 0x43, 0x48, 0x89, 0xF9, 0x89,
	0xF2, 0x83, 0xC4, 0x40, 0x5E, 0x5F, 0x5B, 0x5D, 0xFF, 0xE0, 0x8B, 0x43,
	0x04, 0x83, 0x3C, 0x28, 0x00, 0x7E, 0xDD, 0x80, 0x7B, 0x58, 0x02, 0x75,
	0x0C, 0xFF, 0x53, 0x44, 0xC7, 0x43, 0x40, 0x00, 0x00, 0x00, 0x00, 0xEB,
	0xD5, 0x8B, 0x43, 0x54, 0x85, 0xC0, 0x74, 0x1C, 0x8B, 0x53, 0x08, 0xB9,
	0x5A, 0x00, 0x00, 0x00, 0x80, 0x3C, 0x2A, 0x00, 0x75, 0x08, 0x8B, 0x0B,
	0x89, 0x04, 0x29, 0x8B, 0x4B, 0x54, 0x8B, 0x43, 0x20, 0x89, 0x0C, 0x28,
	0x89, 0x7C, 0x24, 0x10, 0x89, 0x74, 0x24, 0x14, 0x8D, 0x43, 0x5C, 0x89,
	0x44, 0x24, 0x20, 0x31, 0xD2, 0x89, 0x5C, 0x24, 0x08, 0x89, 0x6C, 0x24,
	0x1C, 0x8B, 0x43, 0x10, 0x8D, 0x0C, 0x95, 0x00, 0x00, 0x00, 0x00, 0x01,
	0xE9, 0x8B, 0x04, 0x08, 0x8D, 0x48, 0x01, 0x83, 0xF9, 0x02, 0x0F, 0x82,
	0x28, 0x01, 0x00, 0x00, 0x8B, 0x4B, 0x14, 0xC1, 0xE0, 0x04, 0x0F, 0xB7,
	0xC0, 0x8B, 0x74, 0x08, 0xF0, 0x85, 0xF6, 0x0F, 0x84, 0x13, 0x01, 0x00,
	0x00, 0x0F, 0xB7, 0x43, 0x60, 0x66, 0x85, 0xC0, 0x0F, 0x84, 0x06, 0x01,
	0x00, 0x00, 0x8B, 0x4B, 0x38, 0x89, 0x4C, 0x24, 0x24, 0x0F, 0xB7, 0x3C,
	0x0E, 0x8B, 0x4C, 0x24, 0x20, 0x66, 0x39, 0xF8, 0x74, 0x11, 0x0F, 0xB7,
	0x41, 0x24, 0x83, 0xC1, 0x20, 0x66, 0x85, 0xC0, 0x75, 0xEF, 0xE9, 0xE1,
	0x00, 0x00, 0x00, 0x66, 0x83, 0x79, 0x06, 0x00, 0x0F, 0x84, 0xB5, 0x00,
	0x00, 0x00, 0x8B, 0x43, 0x28, 0x89, 0x74, 0x24, 0x04, 0x8B, 0x73, 0x2C,
	0x8B, 0x04, 0x06, 0x8B, 0x40, 0x40, 0x8B, 0x70, 0x0C, 0x8A, 0x41, 0x08,
	0x88, 0x44, 0x24, 0x03, 0x31, 0xC0, 0x89, 0x74, 0x24, 0x18, 0x89, 0x44,
	0x24, 0x0C, 0x6B, 0xC0, 0x34, 0x8B, 0x7C, 0x30, 0x0C, 0xBD, 0x00, 0x00,
	0x00, 0x00, 0x8A, 0x44, 0x24, 0x03, 0x84, 0xC0, 0x74, 0x1C, 0x88, 0xC4,
	0x31, 0xF6, 0xB0, 0x01, 0x0F, 0xB6, 0xE8, 0x80, 0xF4, 0x41, 0x88, 0x64,
	0x34, 0x28, 0x8A, 0x64, 0x29, 0x08, 0xFE, 0xC0, 0x89, 0xEE, 0x84, 0xE4,
	0x75, 0xEA, 0xC6, 0x44, 0x2C, 0x28, 0x00, 0x31, 0xC0, 0x8B, 0x6C, 0x24,
	0x1C, 0x8A, 0x5C, 0x04, 0x28, 0x84, 0xDB, 0x74, 0x1F, 0x32, 0x5C, 0x07,
	0x11, 0x8D, 0x40, 0x01, 0x74, 0xEF, 0x8B, 0x44, 0x24, 0x0C, 0x40, 0x3D,
	0x00, 0x04, 0x00, 0x00, 0x8B, 0x5C, 0x24, 0x08, 0x8B, 0x74, 0x24, 0x18,
	0x75, 0x9C, 0xEB, 0x50, 0x8B, 0x7C, 0x24, 0x0C, 0x85, 0xFF, 0x8B, 0x5C,
	0x24, 0x08, 0x74, 0x44, 0x8B, 0x43, 0x1C, 0x8B, 0x74, 0x24, 0x04, 0x8B,
	0x34, 0x30, 0x89, 0x73, 0x4C, 0x8B, 0x74, 0x24, 0x04, 0x89, 0x7B, 0x50,
	0x89, 0x3C, 0x30, 0x0F, 0xB7, 0x41, 0x06, 0x8B, 0x7C, 0x24, 0x24, 0x66,
	0x89, 0x04, 0x3E, 0x8B, 0x43, 0x34, 0x8B, 0x09, 0x39, 0x0C, 0x30, 0x74,
	0x17, 0x89, 0x0C, 0x06, 0x8B, 0x43, 0x30, 0xC7, 0x04, 0x30, 0x17, 0xB7,
	0xD1, 0x38, 0x8B, 0x43, 0x24, 0xC7, 0x04, 0x30, 0xFF, 0xFF, 0xFF, 0xFF,
	0x42, 0x83, 0xFA, 0x08, 0x0F, 0x85, 0xB3, 0xFE, 0xFF, 0xFF, 0x8B, 0x43,
	0x18, 0x8B, 0x04, 0x28, 0x8D, 0x48, 0x01, 0x83, 0xF9, 0x02, 0x8B, 0x74,
	0x24, 0x14, 0x8B, 0x7C, 0x24, 0x10, 0x0F, 0x82, 0x28, 0xFE, 0xFF, 0xFF,
	0xC1, 0xE0, 0x04, 0x0F, 0xB7, 0xC0, 0x8B, 0x4B, 0x14, 0x8B, 0x44, 0x08,
	0xF0, 0x85, 0xC0, 0x0F, 0x84, 0x13, 0xFE, 0xFF, 0xFF, 0x8B, 0x4B, 0x1C,
	0x8B, 0x14, 0x08, 0x3B, 0x53, 0x4C, 0x75, 0x06, 0x8B, 0x53, 0x50, 0x89,
	0x14, 0x08, 0x80, 0x7B, 0x58, 0x01, 0x0F, 0x85, 0xF8, 0xFD, 0xFF, 0xFF,
	0xFF, 0x53, 0x44, 0xE9, 0xF0, 0xFD, 0xFF, 0xFF
};

void InitSkinChangerHook()
{
	//get hook vars
	const int MagicFuncIndx = 33;
	auto callPost = csgoProc.FindPattern(engineDll, E("A1 ? ? ? ? B9 ? ? ? ? 6A 00 FF 50 18 8B 15 ? ? ? ? B9 ? ? ? ? 6A 00 68 62 02"));
	auto dword_1087AB70 = csgoProc.HazeDumper(engineDll, E("8B 35 ? ? ? ? 8B D9 8B CE"), { 2, 0 });
	HookMgr::SCH.Setup(dword_1087AB70);

	//set hook vars
	struct WData {
		uint32_t PaintKit;
		uint16_t ItemIndex;
		uint16_t ItemIndexDst;
		uint8_t ModelNameCrt[24];
	};
	struct UnkVoidData {
		uint32_t m_iFOV;
		uint32_t m_iHealth;
		uint32_t m_bIsScoped;
		uint32_t m_lifeState;
		uint32_t m_hMyWeapons;
		uint32_t dwEntityList;
		uint32_t m_hViewModel;
		uint32_t m_nModelIndex;
		uint32_t m_iDefaultFOV;
		uint32_t m_iItemIDHigh;
		uint32_t dwClientState;
		uint32_t dwModelPrecache;
		uint32_t m_flFallbackWear;
		uint32_t m_nFallbackPaintKit;
		uint32_t m_iItemDefinitionIndex;
		uint32_t dwClientState_GetLocalPlayer;

		uint32_t RetCheckPtr;
		uint32_t ForceUpdateFn;
		uint32_t UnknownVoidOrg;

		int stub[2];

		int FOV; 
		uint8_t NeedFU;
		WData Weapons[20];
	} vars1;
	vars1.m_iHealth = Off.m_iHealth;
	vars1.m_lifeState = Off.m_lifeState;
	vars1.dwClientState_GetLocalPlayer = Off.dwClientState_GetLocalPlayer;
	vars1.m_hMyWeapons = Off.m_hMyWeapons;
	vars1.dwEntityList = Off.dwEntityList;
	vars1.m_iItemDefinitionIndex = Off.m_iItemDefinitionIndex;
	vars1.m_nModelIndex = Off.m_nModelIndex;
	vars1.m_iItemIDHigh = Off.m_iItemIDHigh;
	vars1.ForceUpdateFn = Off.ForceUpdateFn;
	vars1.m_nFallbackPaintKit = Off.m_nFallbackPaintKit;
	vars1.m_flFallbackWear = Off.m_flFallbackWear;
	vars1.m_hViewModel = Off.m_hViewModel;
	vars1.dwClientState = Off.dwClientState;
	vars1.dwModelPrecache = Off.dwModelPrecache;
	vars1.m_iDefaultFOV = Off.m_iDefaultFOV;
	vars1.m_bIsScoped = Off.m_bIsScoped;
	vars1.m_iFOV = Off.m_iFOV;

	vars1.RetCheckPtr = callPost;
	vars1.UnknownVoidOrg = HookMgr::SCH.GetFunc(MagicFuncIndx);
	
	int pushCnt = 0;
	auto addWSkin = [&](eItemDefinitionIndex item, int skin) {
		vars1.Weapons[pushCnt].ItemIndex = item;
		vars1.Weapons[pushCnt].ItemIndexDst = 0;
		vars1.Weapons[pushCnt].PaintKit = skin;
		vars1.Weapons[++pushCnt].ItemIndex = 0;
	};
	auto addKSkin = [&](eItemDefinitionIndex item, int skin, eItemDefinitionIndex newItem, const char* modelName)
	{
		/*switch (newItem)
		{
			case WEAPON_KNIFE:
				ret = ("knife_default_ct");
				break;
			case WEAPON_KNIFE_T:
				ret = ("knife_default_t");
				break;
			case WEAPON_KNIFE_BAYONET:
				ret = ("knife_bayonet");
				break;
			case WEAPON_KNIFE_FLIP:
				ret = ("knife_flip");
				break;
			case WEAPON_KNIFE_GUT:
				ret = ("knife_gut");
				break;
			case WEAPON_KNIFE_KARAMBIT:
				ret = ("knife_karam");
				break;
			case WEAPON_KNIFE_M9_BAYONET:
				ret = ("knife_m9_bay");
				break;
			case WEAPON_KNIFE_TACTICAL:
				ret = ("knife_tactical");
				break;
			case WEAPON_KNIFE_FALCHION:
				ret = ("knife_falchion_advanced");
				break;
			case WEAPON_KNIFE_SURVIVAL_BOWIE:
				ret = ("knife_survival_bowie");
				break;
			case WEAPON_KNIFE_BUTTERFLY:
				ret = ("knife_butterfly");
				break;
			case WEAPON_KNIFE_PUSH:
				ret = ("knife_push");
				break;
			case WEAPON_KNIFE_URSUS:
				ret = ("knife_ursus");
				break;
			case WEAPON_KNIFE_GYPSY_JACKKNIFE:
				ret = ("knife_gypsy_jackknife");
				break;
			case WEAPON_KNIFE_STILETTO:
				ret = ("knife_stiletto");
				break;
			case WEAPON_KNIFE_WIDOWMAKER:
				ret = ("knife_widowmaker");
				break;
			case WEAPON_KNIFE_CSS:
				ret = ("knife_css");
				break;
			case WEAPON_KNIFE_CORD:
				ret = ("knife_cord");
				break;
			case WEAPON_KNIFE_CANIS:
				ret = ("knife_canis");
				break;
			case WEAPON_KNIFE_OUTDOOR:
				ret = ("knife_outdoor");
				break;
			case WEAPON_KNIFE_SKELETON:
				ret = ("knife_skeleton");
				break;
		}*/

		uint8_t cc, b = 0;
		while ((cc = modelName[b])) {
			vars1.Weapons[pushCnt].ModelNameCrt[b++] = cc ^ 0x41;
		} vars1.Weapons[pushCnt].ModelNameCrt[b] = 0;

		vars1.Weapons[pushCnt].ItemIndex = item;
		vars1.Weapons[pushCnt].PaintKit = skin;
		vars1.Weapons[pushCnt].ItemIndexDst = newItem;

		vars1.Weapons[++pushCnt].ItemIndex = 0;
	};
	
	//add weapons skins
	addWSkin(WEAPON_AK47, 1141);
	addWSkin(WEAPON_P250, 1044);
	addWSkin(WEAPON_DEAGLE, 1090);
	addWSkin(WEAPON_GLOCK, 38);
	addWSkin(WEAPON_AWP, 475);
	addWSkin(WEAPON_M4A1, 309);
	addWSkin(WEAPON_SSG08, 624);
	addWSkin(WEAPON_M4A1_SILENCER, 660);
	addWSkin(WEAPON_USP_SILENCER, 653);
	addWSkin(WEAPON_NOVA, 716);

	//add knifes skins/models
	addKSkin(WEAPON_KNIFE, 38, WEAPON_KNIFE_KARAMBIT, E("knife_karam"));
	addKSkin(WEAPON_KNIFE_T, 38, WEAPON_KNIFE_TACTICAL, E("knife_tactical"));
	
	//fov changer
	vars1.FOV = 120;

	//names, id
	// https://csgostash.com
	// https://github.com/adamb70/CSGO-skin-ID-dumper/blob/master/item_index.txt

	//check need fu
	auto needWait = Engine::NeedForceUpdate();
	vars1.NeedFU = needWait;

	//write mem
	auto hk = HookMgr::MagicHook.Alloc(&SkinChangerShell, sizeof(SkinChangerShell), &vars1, sizeof(vars1), 12, 0x1000);
	HookMgr::SCH.SetupHook(MagicFuncIndx, hk.second);

	//set global ptr fu flag
	Gbl.FU = (uint8_t*)(hk.first + FIELD_OFFSET(UnkVoidData, NeedFU));
	
	//wait update
	if (needWait) {
		SuperLoop(*Gbl.FU || (Engine::DeltaTicks() == -1));
	}
}